// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "abduselam-arabianmejlis/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// CreateProduct provides a mock function with given fields: c, Product
func (_m *ProductRepository) CreateProduct(c context.Context, Product *domain.Product) (domain.Product, error) {
	ret := _m.Called(c, Product)

	var r0 domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Product) (domain.Product, error)); ok {
		return rf(c, Product)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Product) domain.Product); ok {
		r0 = rf(c, Product)
	} else {
		r0 = ret.Get(0).(domain.Product)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Product) error); ok {
		r1 = rf(c, Product)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteProduct provides a mock function with given fields: c, id
func (_m *ProductRepository) DeleteProduct(c context.Context, id string) error {
	ret := _m.Called(c, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(c, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetProduct provides a mock function with given fields: c, id
func (_m *ProductRepository) GetProduct(c context.Context, id string) (*domain.Product, error) {
	ret := _m.Called(c, id)

	var r0 *domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domain.Product, error)); ok {
		return rf(c, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.Product); ok {
		r0 = rf(c, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetProducts provides a mock function with given fields: c, pagination, filter
func (_m *ProductRepository) GetProducts(c context.Context, pagination *domain.Pagination, filter interface{}) ([]*domain.Product, error) {
	ret := _m.Called(c, pagination, filter)

	var r0 []*domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination, interface{}) ([]*domain.Product, error)); ok {
		return rf(c, pagination, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Pagination, interface{}) []*domain.Product); ok {
		r0 = rf(c, pagination, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.Pagination, interface{}) error); ok {
		r1 = rf(c, pagination, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeProduct provides a mock function with given fields: c, ProductID, userID
func (_m *ProductRepository) LikeProduct(c context.Context, ProductID string, userID string) error {
	ret := _m.Called(c, ProductID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, ProductID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchProducts provides a mock function with given fields: ctx, query
func (_m *ProductRepository) SearchProducts(ctx context.Context, query string) ([]*domain.Product, error) {
	ret := _m.Called(ctx, query)

	var r0 []*domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Product, error)); ok {
		return rf(ctx, query)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Product); ok {
		r0 = rf(ctx, query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnlikeProduct provides a mock function with given fields: c, ProductID, userID
func (_m *ProductRepository) UnlikeProduct(c context.Context, ProductID string, userID string) error {
	ret := _m.Called(c, ProductID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(c, ProductID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateProduct provides a mock function with given fields: c, Product
func (_m *ProductRepository) UpdateProduct(c context.Context, Product *domain.Product) error {
	ret := _m.Called(c, Product)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Product) error); ok {
		r0 = rf(c, Product)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepository(t mockConstructorTestingTNewProductRepository) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
