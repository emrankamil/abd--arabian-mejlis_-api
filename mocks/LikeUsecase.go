// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "abduselam-arabianmejlis/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// LikeUsecase is an autogenerated mock type for the LikeUsecase type
type LikeUsecase struct {
	mock.Mock
}

// DeleteLike provides a mock function with given fields: c, ProductID, userID
func (_m *LikeUsecase) DeleteLike(c context.Context, ProductID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(c, ProductID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(c, ProductID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetLike provides a mock function with given fields: ctx, userID, ProductID
func (_m *LikeUsecase) GetLike(ctx context.Context, userID primitive.ObjectID, ProductID primitive.ObjectID) (*domain.Like, error) {
	ret := _m.Called(ctx, userID, ProductID)

	var r0 *domain.Like
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (*domain.Like, error)); ok {
		return rf(ctx, userID, ProductID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) *domain.Like); ok {
		r0 = rf(ctx, userID, ProductID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Like)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, userID, ProductID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LikeProduct provides a mock function with given fields: c, ProductID, userID
func (_m *LikeUsecase) LikeProduct(c context.Context, ProductID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(c, ProductID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(c, ProductID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UnLikeProduct provides a mock function with given fields: c, ProductID, userID
func (_m *LikeUsecase) UnLikeProduct(c context.Context, ProductID primitive.ObjectID, userID primitive.ObjectID) error {
	ret := _m.Called(c, ProductID, userID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(c, ProductID, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewLikeUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewLikeUsecase creates a new instance of LikeUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewLikeUsecase(t mockConstructorTestingTNewLikeUsecase) *LikeUsecase {
	mock := &LikeUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
